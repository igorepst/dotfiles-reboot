# vim: set ft=zsh:

source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

# Anonymous function to use 'local' (executed automatically & thrown away)
function () {
  export _FZF_DEF_CMD_='fd --follow --hidden --exclude .git --color=always'
  export FZF_DEFAULT_COMMAND=${_FZF_DEF_CMD_}
  # Preview should not be in FZF_DEFAULT_OPTS to use with pipe
  # https://github.com/junegunn/fzf.vim/issues/771
  export FZF_DEFAULT_OPTS="--height 60% --reverse --border --ansi"
  export FZF_PREVIEW_OPTS="--preview-window 'right:60%' --preview '[ -d {} ] && (exa -lbhg --git --color=always {}/ | head -15) || bat --color=always --style=header,grid --line-range :15 {}'"
  # Paste the selected files and directories onto the command line
  export FZF_CTRL_T_COMMAND=${_FZF_DEF_CMD_}
  export FZF_CTRL_T_OPTS=${FZF_DEFAULT_OPTS}' '${FZF_PREVIEW_OPTS}
  # cd into the selected directory
  export FZF_ALT_C_COMMAND=${_FZF_DEF_CMD_}' --type directory'
  export FZF_ALT_C_OPTS=${FZF_DEFAULT_OPTS}' '${FZF_PREVIEW_OPTS}
  # Paste the selected command from history onto the command line
  export FZF_CTRL_R_OPTS="--header='?:toggle preview' --inline-info --preview 'echo {}' \
    --preview-window down:3:hidden:wrap --bind '?:toggle-preview'"
  # Fuzzy completion for files and directories can be triggered if the word before the cursor
  # ends with the trigger sequence. Ex.: vim ``<TAB>
  export FZF_COMPLETION_TRIGGER='``'
  # Use fd to list path candidates
  _fzf_compgen_path() {
    fd --follow --hidden --exclude .git --color=always . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --follow --hidden --exclude .git --color=always --type directory . "$1"
  }
}

function fo() {
  local out file key
  IFS=$'\n' out=("$(fzf-tmux --header='Ctrl-o -> Open, Ctrl-e/Enter -> Edit' --query="$1" --exit-0 --expect=ctrl-o,ctrl-e ${(Q)${(z)FZF_PREVIEW_OPTS}})")
  key=$(head -1 <<< "$out")
  file=$(head -2 <<< "$out" | tail -1)
  if [ -n "$file" ]; then
    [ "$key" = ctrl-o ] && xdg-open "$file" || ${EDITOR:-vim} "$file"
  fi
}

function vg() {
  local file
  local line
  local arg

  [[ -z "$1" ]] && arg="." || arg="$1"
  read -r file line <<<"$(rg --no-heading --line-number $arg | fzf -0 -1 | awk -F: '{print $1, $2}')"

  if [[ -n $file ]]
  then
     vim $file +$line
  fi
}
