filetype plugin indent on
syntax enable

set autoindent
" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Indent with spaces instead of tabs
set smarttab
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

" Timeout for mappings
set timeout
set timeoutlen=500
" Timeout for key codes
set ttimeout
set ttimeoutlen=50

set incsearch
set hlsearch

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

set history=1000
set clipboard=unnamedplus

let igVimPath = split(&rtp, ',')[0] . '/'
let igVimPathVolatile=igVimPath . 'volatile'
let g:netrw_home=igVimPathVolatile
" set doesn't do path expansion
execute "set viminfo='20,<100,:100,%,n" . igVimPathVolatile . '/.viminfo'

set scrolloff=5
set sidescroll=1
set sidescrolloff=5

set mouse=a
set showcmd
" Wrap long lines at the end of a word
set linebreak
" Left/right movement to the prev./next line also
set whichwrap=b,s,<,>,[,]
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:$
" Show @@@ in the last line if it is truncated.
set display=truncate
" Highlight strings inside C comments
let c_comment_strings=1

set wildmenu
set wildmode=longest:full,full

" Use Tab in mappings
set wildcharm=<Tab>

set ignorecase
" Case insensitive completion of file/dirs
set wildignorecase

" Map Q to q and Q! to q!
command! -bang Q q<bang>
" Don't use Ex mode, use Q for formatting.
nnoremap Q gq

" Break undo sequence on Space, Tab and Enter
inoremap <Space> <Space><C-g>u
inoremap <Tab> <Tab><C-g>u
inoremap <CR> <CR><C-g>u
" Make it possible to undo CTRL-U in insert mode
inoremap <C-U> <C-G>u<C-U>

" Diff between written and current states
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
set suffixes-=.h,.obj

nnoremap <Space> <nop>
let mapleader="\<Space>"

let autoload_plug_path = igVimPath . 'autoload/plug.vim'
if empty(glob(autoload_plug_path))
  silent execute '!curl -fLo ' . autoload_plug_path . ' --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
unlet autoload_plug_path

call plug#begin(igVimPathVolatile . '/plugged')
Plug 'junegunn/fzf.vim'
Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
call plug#end()

" Define one augroup for all autocommands
augroup ig_au
    autocmd!
augroup END

" Always jump to the last known cursor position.
autocmd ig_au BufReadPost *
            \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            \ |   exe "normal! g`\""
            \ | endif

autocmd ig_au ColorScheme *
            \ highlight MatchParen gui=underline,bold guibg=red guifg=black cterm=underline,bold ctermbg=red ctermfg=black

if $TERM=~'linux'
    colorscheme default
else
    " see xterm-true-color (works in Tmux also)
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    colorscheme tempus_dawn
    if $TERM=~'xterm'
        " see modifyOtherKeys
        let &t_TI = ""
        let &t_TE = ""
    endif
endif

set shortmess+=Ia
set shortmess-=S
set noshowmode
set noruler
set laststatus=2

let g:fzfIgMenu_dict = {
            \ "Toggle list": #{f: "call ighelper#ToggleBoolOpt('list')", k: "<Leader>tl"},
            \ "Toggle wrap": #{f: "call ighelper#ToggleBoolOpt('wrap')",},
            \ "Toggle hlsearch": #{f: "call ighelper#ToggleBoolOpt('hlsearch')",},
            \ "Convert to DOS": #{f: "set ff=dos",},
            \ "Convert to Unix": #{f: "set ff=unix",},
            \ "Convert to UTF-8": #{f: "set fileencoding=utf8",},
            \ "Search in runtime": #{f: "call SearchInRuntime()",},
            \ "Find file in runtime": #{f: "call FindFileInRuntime()",},
            \ "Format JSON": #{f: "%!python -m json.tool",},
            \ }
let g:fzfIgMenu_createCmd = 1
let g:fzfIgMenu_cmdPrefix = 'Ig'

nmap <Leader><F2> <Plug>FzfIgMenuOpen

set hidden
set autoread
 
function! SearchInRuntime() abort
    call fzf#vim#grep("rg --column --line-number --no-heading --color=always '' " . g:igVimPath . ' /usr/share/vim', 1) 
endfunction

function! FindFileInRuntime() abort
    call fzf#run({'sink': 'e', 'source': "fd . " . g:igVimPath . ' /usr/share/vim'})
endfunction

" matchit.vim - % to jump between pairs
set matchpairs+=<:> 
packadd! matchit
let b:match_ignorecase = 1

" Make shift-insert work like in Xterm
if has('gui_running')
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>
endif

