filetype plugin indent on
syntax enable

nnoremap <Space> <nop>
let mapleader="\<Space>"

set autoindent
" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Indent with spaces instead of tabs
set smarttab
set tabstop=8
set softtabstop=4
set shiftwidth=4
set expandtab

" Timeout for mappings
set timeout
set timeoutlen=500
" Timeout for key codes
set ttimeout
set ttimeoutlen=50

set incsearch
set hlsearch

" Do not recognize octal numbers for Ctrl-A and Ctrl-X
set nrformats-=octal

set history=1000
set clipboard=unnamedplus

let igVimPath = split(&rtp, ',')[0] . '/'
let igVimPathVolatile=igVimPath . 'volatile'
" set doesn't do path expansion
execute "set viminfo='20,<100,:100,%,n" . igVimPathVolatile . '/.viminfo'
execute "set viewdir=" . igVimPathVolatile . '/view'

let g:netrw_home=igVimPathVolatile
let g:netrw_sort_options="i" " Case insensitive sort
let g:netrw_keepdir=0 " Change working dir
let g:netrw_hide=0 " Show all
let g:netrw_banner=0
let g:netrw_browse_split=4
let g:netrw_liststyle=3 " Tree
let g:netrw_sizestyle="H"
nnoremap <expr> <Leader>- ":Explore" . (&filetype ==# 'netrw' ? ".." : ".") . "<CR>"

set scrolloff=5
set sidescroll=1
set sidescrolloff=5

set mouse=a
set showcmd
" Wrap long lines at the end of a word
set linebreak
" Left/right movement to the prev./next line also
set whichwrap=b,s,<,>,[,]
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,eol:$
" Show @@@ in the last line if it is truncated.
set display=truncate
" Highlight strings inside C comments
let c_comment_strings=1

set wildmenu
set wildmode=longest:full,full

" Use Tab in mappings
set wildcharm=<Tab>

set ignorecase
" Case insensitive completion of file/dirs
set wildignorecase

" Map Q to q and Q! to q!
command! -bang Q q<bang>
" Don't use Ex mode, use Q for formatting.
nnoremap Q gq

" Break undo sequence on Space, Tab and Enter
inoremap <Space> <Space><C-g>u
inoremap <Tab> <Tab><C-g>u
inoremap <CR> <CR><C-g>u
" Make it possible to undo CTRL-U in insert mode
inoremap <C-U> <C-G>u<C-U>

" Diff between written and current states
command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
set suffixes-=.h,.obj

let autoload_plug_path = igVimPath . 'autoload/plug.vim'
if empty(glob(autoload_plug_path))
    silent execute '!curl -fLo ' . autoload_plug_path . ' --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
unlet autoload_plug_path

let g:ig_plug_path=igVimPathVolatile . '/plugged'
call plug#begin(g:ig_plug_path)
Plug 'junegunn/fzf.vim'
Plug 'https://gitlab.com/protesilaos/tempus-themes-vim.git'
Plug 'vifm/vifm.vim'
Plug 'PProvost/vim-ps1'
Plug 'rust-lang/rust.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" Define one augroup for all autocommands
augroup ig_au
    autocmd!
augroup END

" Always jump to the last known cursor position.
autocmd ig_au BufReadPost *
            \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            \ |   exe "normal! g`\""
            \ | endif

autocmd ig_au ColorScheme *
            \ highlight MatchParen gui=underline,bold guibg=red guifg=black cterm=underline,bold ctermbg=red ctermfg=black |
            \ highlight User1 ctermbg=lightgreen ctermfg=black guibg=lightgreen guifg=black |
            \ highlight User9 ctermbg=black ctermfg=white guibg=black guifg=white

if $TERM=~'linux'
    colorscheme default
else
    " see xterm-true-color (works in Tmux also)
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
    colorscheme tempus_dawn
    if $TERM=~'xterm'
        " see modifyOtherKeys
        let &t_TI = ""
        let &t_TE = ""
    endif
endif

set shortmess+=IaF
set shortmess-=S
set noshowmode
set noruler
set laststatus=2

let g:fzfIgMenu_dict = {
            \ "Toggle list": #{f: "call ighelper#ToggleBoolOpt('list')", k: "<Leader>tl"},
            \ "Toggle wrap": #{f: "call ighelper#ToggleBoolOpt('wrap')",},
            \ "Toggle hlsearch": #{f: "call ighelper#ToggleBoolOpt('hlsearch')",},
            \ "Convert to DOS": #{f: "set ff=dos",},
            \ "Convert to Unix": #{f: "set ff=unix",},
            \ "Convert to UTF-8": #{f: "set fileencoding=utf8",},
            \ "Search in runtime": #{f: "call SearchInRuntime()",},
            \ "Find file in runtime": #{f: "call FindFileInRuntime()",},
            \ "Reload config": #{f: "call ighelper#ReloadConfigFiles()",},
            \ "Format JSON": #{f: "%!python -m json.tool",},
            \ "Trim trailing space": #{f: "execute ':%s/\\s\\+$//e'",},
            \ "Reindent file": #{f: "execute 'normal! mzgg=G`z' | IgTrimTrailingSpace",},
            \ }
let g:fzfIgMenu_createCmd = 1
let g:fzfIgMenu_cmdPrefix = 'Ig'

nmap <Leader><F2> <Plug>FzfIgMenuOpen

set hidden
set autoread

function! SearchInRuntime() abort
    call fzf#vim#grep("rg --column --line-number --no-heading --color=always '' " . g:igVimPath . ' ' . expand("$VIM"), 1) 
endfunction

function! FindFileInRuntime() abort
    call fzf#run({'sink': 'e', 'source': "fd . " . g:igVimPath . ' ' . expand("$VIM")})
endfunction

" matchit.vim - % to jump between pairs
set matchpairs+=<:> 
packadd! matchit
let b:match_ignorecase = 1

" Make shift-insert work like in Xterm
if has('gui_running')
    map <S-Insert> <MiddleMouse>
    map! <S-Insert> <MiddleMouse>
endif

" Large file: more than 10Mb
autocmd ig_au BufReadPre *
            \ let f=expand("<afile>") |
            \ if getfsize(f) > 10485760 |
            \ set eventignore+=FileType |
            \ setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 |
            \ else |
            \ set eventignore-=FileType |
            \ endif

" Commenting blocks of code.
autocmd ig_au FileType c,cpp,java,rust let b:comment_leader = '\/\/'
autocmd ig_au FileType sh,bash,zsh,jproperties,tmux,conf,xf86conf,fstab,ps1,python let b:comment_leader = '#'
autocmd ig_au FileType vim,vifm let b:comment_leader = '"'
autocmd ig_au FileType xdefaults let b:comment_leader = '!'
autocmd ig_au FileType lua let b:comment_leader = '--'

" https://stackoverflow.com/a/24046914/407953
function! ToggleComment()
    if getline('.') =~ "^\\s*" . b:comment_leader . " " 
        " Uncomment the line
        execute "silent s/^\\(\\s*\\)" . b:comment_leader . " /\\1/"
    else 
        if getline('.') =~ "^\\s*" . b:comment_leader
            " Uncomment the line
            execute "silent s/^\\(\\s*\\)" . b:comment_leader . "/\\1/"
        else
            " Comment the line
            execute "silent s/^\\(\\s*\\)/\\1" . b:comment_leader . " /"
        end
    end
endfunction
" This is actually Ctrl+/ and not Ctrl+_
nnoremap <C-_> :call ToggleComment()<CR>
vnoremap <C-_> :call ToggleComment()<CR>
inoremap <C-_> <Esc>:call ToggleComment()<CR>i

set nohlsearch
set completeopt=longest,menu,popup

" Open Vim help or Man with 'K'
source $VIMRUNTIME/ftplugin/man.vim

set splitbelow splitright
set diffopt+=vertical,indent-heuristic

autocmd ig_au BufRead,BufNewFile *.txt call ighelper#UseSpellConditionally()

" Disable automatic comment leader
autocmd ig_au FileType * setlocal formatoptions-=ro
" Add '-' to use search with '*' on expressions of the form 'xxx-yyy'
set iskeyword+=-
set iskeyword-=#

" Highlight sh as Bash by default
let g:is_bash=1

" Highlight ```[type] code blocks in MD
let g:markdown_fenced_languages = [
            \  'css',
            \  'erb=eruby',
            \  'sh',
            \  'javascript',
            \  'js=javascript',
            \  'json=javascript',
            \  'ruby',
            \  'sass',
            \  'xml',
            \  'vim',
            \]

nnoremap <Leader>ov :edit $MYVIMRC<CR>

" Create file's directory before saving, if it doesn't exist.
" Original: https://stackoverflow.com/a/4294176/151048
autocmd ig_au BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
fun! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file !~# '\v^\w+\:\/'
        call mkdir(fnamemodify(a:file, ':h'), 'p')
    endif
endfun

" https://gist.github.com/romainl/56f0c28ef953ffc157f36cc495947ab3
set grepprg=rg\ --vimgrep\ --ignore-file\ $HOME/.config/ripgrep/ignore\ --smart-case
command! -nargs=+ -complete=file_in_path -bar Grep  cgetexpr ighelper#Grep(<q-args>)
command! -nargs=+ -complete=file_in_path -bar LGrep lgetexpr ighelper#Grep(<q-args>)

autocmd ig_au QuickFixCmdPost cgetexpr cwindow
autocmd ig_au QuickFixCmdPost lgetexpr lwindow

nnoremap <Leader>// :LGrep<Space>

" No relative number in quickfix and location list
command! LListToggle call ighelper#LListToggle()
nnoremap <Leader>ll :LListToggle<CR>

