% psql
# Remote command line
psql -U username -h localhost -d postgres -c "DROP DATABASE \"$DATABASE\";"

%psql
# Provide password on command line
PGPASSWORD=<pass> psql

%psql
# Get DB owner
SELECT d.datname as "Name",pg_catalog.pg_get_userbyid(d.datdba) as "Owner" FROM pg_catalog.pg_database d WHERE d.datname = "<db-name>" ORDER BY 1;

%psql
# Copy DB on the same server
CREATE DATABASE "<dst DB>" WITH TEMPLATE "<src DB>" OWNER postgres;

%psql
# Check vacuum and autovacuum
select relname,n_live_tup,n_dead_tup,last_autovacuum,last_vacuum from pg_stat_user_tables where relname='<table-name>'

%psql
# List largest tables
select schemaname as table_schema, relname as table_name, pg_size_pretty(pg_total_relation_size(relid)) as total_size, pg_size_pretty(pg_relation_size(relid)) as data_size, pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) as external_size from pg_catalog.pg_statio_user_tables order by pg_total_relation_size(relid) desc, pg_relation_size(relid) desc limit 10;

%psql
# Show size of the databases
SELECT pg_database.datname as "database_name", pg_database_size(pg_database.datname)/1024/1024 AS size_in_mb FROM pg_database ORDER by size_in_mb DESC;

%psql
# Select long running queries
SELECT pid, now() - query_start as "runtime", usename, datname, waiting, state, query FROM pg_stat_activity WHERE now() - query_start > '2 minutes'::interval and state = 'active' ORDER BY runtime DESC;

%psql
# Show dead vs live tuples
select relname, n_live_tup, n_dead_tup from pg_stat_user_tables group by 1, 2, 3 order by 2, 3 desc;

%psql
# Show dead tuples
select relname, n_dead_tup, last_vacuum, last_autovacuum from pg_catalog.pg_stat_all_tables where n_dead_tup > 0 order by n_dead_tup desc;
