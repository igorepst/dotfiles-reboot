" vim: filetype=vifm :

set tuioptions-=s
set tuioptions+=u
set suggestoptions=normal,visual,view,otherpane,delay,keys,registers,marks
set vicmd=vim
set notrash
set fastrun
set vimhelp
set sortnumbers
set sort=+iname
set ignorecase
set smartcase
set norunexec
set history=1000
set undolevels=1000
set wildmenu
set wildstyle=popup
set syscalls
set nohlsearch
set incsearch
set nofollowlinks
set scrolloff=5
set timefmt=%d/%m/%y\ %H:%M
set statusline="   %t   %A   %u:%g   %s   %d   %{&sort}%[   %T%]"
set cpoptions-=f
set nowrap
set tabstop=2
set rulerformat='%2l-%S%[ +%x%]'
set dotfiles
set caseoptions=pG
set fillchars=vborder:ǀ

if !has('win')
    set slowfs=curlftpfs
endif

if $TMUX != ''
    set notitle
    screen!
else
    set title
endif

set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks
set noquickview
" Sync registers between instances
set syncregs='mineSync'
    
windo set viewcolumns=-{iname}..,7{size},8{mode},16{mtime}

set grepprg='rg --line-number --color=never --hidden %i %a %s'

colorscheme PaperColor

" Tmux: use 'system' to see the UI and open a split; otherwise - use 'term'
" as the command is interactive
command! fzf :let $FCMD = 'fd --hidden | fzf-tmux -d 30%% --height 10 --preview "[ -d {} ] && (ls -Alh --color=always {}/ | head -10) || bat --color=always --style=plain --line-range=:10  --theme=base16 {}" 2>/dev/tty'
    \| if $TMUX != '' 
    \|    let $FZF_RES = system($FCMD)
    \| else
    \|    let $FZF_RES = term($FCMD)
    \| endif
    \| if $FZF_RES != ''
    \|    goto $FZF_RES
    \| endif
nnoremap // :fzf<cr>

command! rg :let $RGCMD = 'rg --files-with-matches --ignore-case --hidden'
    \| let $FCMD = 'FZF_DEFAULT_COMMAND="rg --files" fzf-tmux -d 30%% --height 10 --exact --ansi --phony --bind "change:reload:$RGCMD {q} || true" --preview "rg -i --pretty --context 2 {q} {}" 2>/dev/tty'
    \| if $TMUX != '' 
    \|    let $FZF_RES = system($FCMD)
    \| else
    \|    let $FZF_RES = term($FCMD)
    \| endif
    \| if $FZF_RES != ''
    \|    goto $FZF_RES
    \| endif
nnoremap /? :rg<cr>

command! reload :write | restart
command! zzzGITCMD git -c color.ui=always %a %q
command! gd :exe "zzzGITCMD diff %d"
command! gs :exe "zzzGITCMD status %d"
command! gl :exe "zzzGITCMD log %c"
command! extract aunpack %f &>/dev/null &
command! archive apack %a %f &>/dev/null &
" nnoremap l :if &previewprg == '' | set previewprg='git log --color -- %c 2>&1' | view! | else | set previewprg='' | view | endif<cr>

" Space selects and goes down
nnoremap <space> tj
nnoremap * ggVG
nnoremap <c-\> :bmarks<cr>
nnoremap <f3> :view<cr>
vnoremap <f3> :view<cr>gv
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

bmark! ~/dotfiles-reboot/ dotfiles

filetype *.ssh
       \ {Mount with sshfs}
       \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND,

filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" atool
filetype *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,
         \*.tar.Z,*.tZ,*.tar.lzo,*.tzo,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,
         \*.tar,
         \*.zip,*.jar,*.war,*.rar,*.lha,*.lzh,
         \*.alz,*.ace,*.a,*.arj,*.arc,
         \*.rpm,*.deb,
         \*.cab,
         \*.gz,*.bz,*.bz2,
         \*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,
         \*.cpio
         \ aunpack %f
fileviewer *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,
         \*.tar.Z,*.tZ,*.tar.lzo,*.tzo,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,
         \*.tar,
         \*.zip,*.jar,*.war,*.rar,*.lha,*.lzh,
         \*.alz,*.ace,*.a,*.arj,*.arc,
         \*.rpm,*.deb,
         \*.cab,
         \*.gz,*.bz,*.bz2,
         \*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,
         \*.cpio
         \ als %f 2>/dev/null

" GPG signature
filetype *.asc
       \ {Check signature}
       \ !!gpg --verify %c

filetype <audio/*>,<video/*>
       \ {Play with mpv}
       \ mpv %f

" vifmimg
fileviewer *.pdf
        \ vifmimg pdfpreview %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
        \ vifmimg videopreview %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm
        \ vifmimg draw %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

fileviewer *.gif
        \ vifmimg gifpreview %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear

fileviewer *.ico
        \ vifmimg magickpreview %px %py %pw %ph %c
        \ %pc
        \ vifmimg clear
        
if has('win')
    filetype * start, explorer
else
    fileviewer *[^/] bat %c
    filetype * xdg-open
endif


mark b ~/bin/
mark h ~/

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! vgrep vim "+grep %a"


command! zzzInternalXC git log --name-only --format=%%n -- %d| CDUP=`git rev-parse --show-cdup` perl -lne 'print if /./ and s(^)($ENV{CDUP}) and -f and not $seen{$_}++' | head -%a %U


" filextype *.pdf zathura %c %i &, apvlv %c, xpdf %c
" fileviewer *.pdf pdftotext -nopgbrk %c -
" 
" PostScript
" filextype *.ps,*.eps,*.ps.gz
        " \ {View in zathura}
        " \ zathura %f,
        " \ {View in gv}
        " \ gv %c %i &,
" 
" Djvu
" filextype *.djvu
        " \ {View in zathura}
        " \ zathura %f,
        " \ {View in apvlv}
        " \ apvlv %f,
" 
" Audio
" filetype *.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus
       " \ {Play using ffplay}
       " \ ffplay -nodisp -autoexit %c,
       " \ {Play using MPlayer}
       " \ mplayer %f,
" fileviewer *.mp3 mp3info
" fileviewer *.flac soxi
" 
" Video
" filextype *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         " \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         " \*.as[fx]
        " \ {View in mpv}
        " \ mpv %f,
        " \ {View using ffplay}
        " \ ffplay -fs -autoexit %f,
        " \ {View using Dragon}
        " \ dragon %f:p,
        " \ {View using mplayer}
        " \ mplayer %f,
" fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
          " \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
          " \*.as[fx]
         " \ ffprobe -pretty %c 2>&1
" 
" Web
" filextype *.html,*.htm
        " \ {Open with xhromium}
        " \ chromium %f &,
        " \ {Open with firefox}
        " \ firefox %f &,
        " \ {Open with uzbl}
        " \ uzbl-browser %f %i &,
" filetype *.html,*.htm links, lynx
" 
" Images
" filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.svg
        " \ {View in eog}
        " \ eog %f,
        " \ {View in sxiv}
        " \ sxiv %f,
        " \ {View in gpicview}
        " \ gpicview %c,
        " \ {View in shotwell}
        " \ shotwell,
" fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm
         " \ identify %f
" 
" 
" 
" Torrent
" filetype *.torrent ktorrent %f &
" fileviewer *.torrent dumptorrent -v %c

" FuseZipMount
" filetype *.zip,*.jar,*.war,*.ear,*.oxt,*.apkg
       " \ {Mount with fuse-zip}
       " \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
       " \ {View contents}
       " \ zip -sf %c | less,
       " \ {Extract here}
       " \ tar -xf %c,
" fileviewer *.zip,*.jar,*.war,*.ear,*.oxt zip -sf %c
" 
" ArchiveMount
" filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz
       " \ {Mount with archivemount}
       " \ FUSE_MOUNT|archivemount %SOURCE_FILE %DESTINATION_DIR,
" fileviewer *.tgz,*.tar.gz tar -tzf %c
" fileviewer *.tar.bz2,*.tbz2 tar -tjf %c
" fileviewer *.tar.txz,*.txz xz --list %c
" fileviewer *.tar tar -tf %c
" 
" Rar2FsMount and rar archives
" filetype *.rar
       " \ {Mount with rar2fs}
       " \ FUSE_MOUNT|rar2fs %SOURCE_FILE %DESTINATION_DIR,
" fileviewer *.rar unrar v %c

" IsoMount
" filetype *.iso
       " \ {Mount with fuseiso}
       " \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" FtpMount
" filetype *.ftp
       " \ {Mount with curlftpfs}
       " \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND,

" Fuse7z and 7z archives
" filetype *.7z
       " \ {Mount with fuse-7z}
       " \ FUSE_MOUNT|fuse-7z %SOURCE_FILE %DESTINATION_DIR,
" fileviewer *.7z 7z l %c

" Office files
" filextype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx libreoffice %f &
" fileviewer *.doc catdoc %c
" fileviewer *.docx docx2txt.pl %f -

" Directories
" filextype */
        " \ {View in thunar}
        " \ Thunar %f &,


" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" Sample mappings

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>


" Open file in existing instance of gvim
nnoremap o :!gvim --remote-tab-silent %f<cr>
" Open file in new instance of gvim
nnoremap O :!gvim %f<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l

" Interaction with system clipboard
if has('win')
    " Yank current directory path to Windows clipboard with forward slashes
    nnoremap yp :!echo %"d:gs!\!/! %i | clip<cr>
    " Yank path to current file to Windows clipboard with forward slashes
    nnoremap yf :!echo %"c:gs!\!/! %i | clip<cr>
elseif executable('xclip')
    " Yank current directory path into the clipboard
    nnoremap yd :!echo %d | xclip %i<cr>
    " Yank current file path into the clipboard
    nnoremap yf :!echo %c:p | xclip %i<cr>
elseif executable('xsel')
    " Yank current directory path into primary and selection clipboards
    nnoremap yd :!echo -n %d | xsel --input --primary %i &&
                \ echo -n %d | xsel --clipboard --input %i<cr>
    " Yank current file path into into primary and selection clipboards
    nnoremap yf :!echo -n %c:p | xsel --input --primary %i &&
                \ echo -n %c:p | xsel --clipboard --input %i<cr>
endif

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" Open console in current directory
nnoremap ,t :!xterm &<cr>


nmap ; :


" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open gvim to edit vifmrc
nnoremap ,C :!gvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>


" ------------------------------------------------------------------------------


" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername


command link ln -s %d/%f %D
command! cmpinternal compare-cmd %a %S
command! cmp : if expand('%%c') == expand('%%f')
              \ |     echo expand('Comparing %%"c and %%"C:t ...')
              \ |     cmpinternal %c %C
              \ | else
              \ |     echo expand('Comparing files: %%"f ...')
              \ |     cmpinternal %f
              \ | endif


set classify=' :dir:/, :exe:, :reg:, :link:,? :?:, ::../::,
            \  ::*.vim,,.vim,,*.vimrc,,.vimrc,,vimrc,,*.gvimrc,,*.vifm,,.viminfo,,.netrwhist,,*.vba::,
            \  ::*.vim/,,.vim/,,*.nvim/::/,
            \  ::*.exe,,*.dll,,*.msi,,*.bat::,
            \  ::*.db,,*.dump,,*.sql::,
            \  ::*.iso,,*.bin,,*.nrg,,*.vdi,,*.cue,,*.dmg,,*.img,,*.mdf,,*.vcd,,*.vmdk::,
            \  ::VBoxMachines/,,VirtualBox VMs/::/,
            \  ::.git*::,
            \  ::.git/::/,
            \  ::.Xdefaults,,.Xresources,,.bashprofile,,.bash_profile,,.bash_logout,,bash_history,,.DS_Store,,.fasd,,.jack-settings,,.mime.types,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.zprofile,,.urlview,,.user-dirs.dirs,,.mimeapps.list,,.Xauthority,,Makefile,,Makefile.*,,.zshenv,,.zlogin,,.zlogout,,*.conf,,*.ini,,*.rc,,.*rc,,*rc,,*.yml,,*.yaml,,*.cfg::,
            \  ::.config/,,.zsh/::/,
            \  ::*.zsh,,.*.zsh,,*.sh,,*.bash,,*.fish::,
            \  ::Desktop/::/,
            \  ::Documents/,, My Documents/::/,
            \  ::Downloads/::/,
            \  ::Dropbox/::/,
            \  ::Google\ Drive/::/,
            \  ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::,
            \  ::Music/::/,
            \  ::*.bmp,,*.gif,,*.ico,,*.jpeg,,*.jpg,,*.png,,*.svg,,*.svgz,,*.tga,,*.tiff,,*.xmb,,*.xcf,,*.xpm,,*.xspf,,*.xwd,,*.cr2,,*.dng,,*.3fr,,*.ari,,*.arw,,*.bay,,*.crw,,*.cr3,,*.cap,,*.data,,*.dcs,,*.dcr,,*drf,,*.eip,,*.erf,,*.fff,,*.gpr,,*.iiq,,*.k25,,*.kdc,,*.mdc,,.*mef,,*.mos,,.*.mrw,,.*.obm,,*.orf,,*.pef,,*.ptx,,*.pxn,,*.r3d,,*.raf,,*.raw,,*.rwl,,*.rw2,,*.rwz,,*.sr2,,*.srf,,*.srf,,*.srw,,*.tif,,*.x3f,,.fehbg::,
            \  ::Pictures/,,My Pictures/::/,
            \  ::*.rlib,,*.rs::,
            \  ::.rustup/::/,
            \  ::*.go::,
            \  ::.cargo/,,go/::/,
            \  ::Public/::/,
            \  ::Templates/::/,
            \  ::*.avi,,*.flv,,*.m4v,,*.mkv,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm::,
            \  ::Videos/::/,
            \  ::*.js,,package.json,,package-lock.json::,
            \  ::node_modules/,,.node_modules/,,.npm/::/,
            \  ::lost+found/::/,
            \  ::favicon.*::,
            \  ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::,
            \  ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::,
            \  ::ledger::,
            \  ::known_hosts,,authorized_keys,,*.key,,*.pub,,id_rsa_*,,*.gpg,,*.kbx::,
            \  ::.gnupg/,,.ssh/::/,
            \  ::.tmux.conf::,
            \  ::.tmux/::/,
            \  ::*.jsx::,
            \ λ ::*.ml,,*.mli::,
            \  ::*.styl::,
            \  ::*.scss::,
            \  ::*.py,,*.pyc,,*.pyd,,*.pyo::,
            \  ::*.php::,
            \  ::*.markdown,,*.md,,README.*,,README::,
            \  ::license,,copyright,,copying,,LICENSE,,COPYRIGHT,,COPYING,,LICENSE.txt::,
            \  ::*.json::,
            \  ::*.ejs,,*.htm,,*.html,,*.slim,,*.xml,,*.xhtml::,
            \  ::*.hbs,,*.mustasche::,
            \  ::*.css,,*.less::,
            \  ::*.rss::,
            \  ::*.coffee::,
            \  ::*.twig::,
            \  ::*.c++,,*.cc,,*.c,,*.cpp,,*.cxx,,*.c,,*.h::,
            \  ::*.hs,,*.lhs::,
            \  ::*.lua::,
            \  ::*.jl::,
            \  ::*.ts::,
            \  ::*.sln,,*.suo::,
            \  ::*.diff,,*.sum,,*.md5,,*.sha512::,
            \  ::*.scala::,
            \  ::*.java,,*.jar,,*.class::,
            \  ::*.xul::,
            \  ::*.clj,,*.cljc::,
            \  ::*.pl,,*.pm,,*.t::,
            \  ::*.cljs,,*.edn::,
            \  ::*.rb,,Rakefile::,
            \  ::*.dart::,
            \  ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::,
            \  ::*.d::,
            \  ::*.erl,,*.hrl::,
            \  ::*.ai::,
            \  ::*.psb,,*.psd::,
            \  ::*.pdf::,
            \  ::*.epub,,*.fb2,,*.djvu,,*.rtf::,
            \  ::*.7z,,*.apk,,*.bz2,,*.cab,,*.cpio,,*.deb,,*.gem,,*.gz,,*.gzip,,*.lh,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xz,,*.zip::,
            \  ::*.cbr,,*.cbz::,
            \  ::*.log::,
            \  ::*.doc,,*.docx,,*.adoc::,
            \  ::*.xls,,*.xls[mx]::,
            \  ::*.pptx,,*.ppt::,
            \  ::*.cs::,
            \  ::procfile::,
            \  ::Dockerfile,,docker-compose.yml::,
            \  ::config.mk,,config.m4,,config.ac,,*.a,,*.cmake,,*.jl,,*.o,,*.so,,a.out,,configure::'

if $MY_PC_IS == 'work'
    source ~/.work/vifmrc-work
endif
